syntax = "proto3";
package global_scheduler_service;

enum RegisterType {
	WORKER = 0;
	CLIENT = 1;
}

message RegisterRequest {
	// RegisterType register_type = 1;
	string address = 1;
	repeated string fn_names = 2;
}

message RegisterResponse {
	optional string leader_redirect = 1;
	fixed64 lifetime_id = 2;
	fixed64 heart_beat_timeout = 3;
}

message FnStats {
	fixed64 completed = 1;
	fixed64 pending = 2;

	fixed64 mean_latency = 3;
	fixed64 avg_call_bytes = 4;
	fixed64 avg_ret_bytes = 5;
}

message Stats {
	fixed64 completed = 1;
	fixed64 pending = 2;

	fixed64 mean_latency = 3;
	fixed64 avg_call_bytes = 4;
	fixed64 avg_ret_bytes = 5;

	map<string, FnStats> fn_stats = 6;
}

message FailedTasks {
	fixed64 lifetime_id = 2;
	repeated fixed64 task_id = 3;
}

message HeartBeatRequest {
	string address = 1;
	fixed64 lifetime_id = 2;
	fixed64 lifetime_list_id = 3;
	Stats stats = 4;
	repeated fixed64 failed_tasks = 5;
}

message HeartBeatResponse {
	optional string leader_redirect = 1;
	fixed64 lifetime_id = 2;

	fixed64 lifetime_list_id = 3;
	// address -> lifetime_id
	map<string, fixed64> lifetimes = 4;

	// TODO: Convert this to a delta to reduce waste.
	// address -> Stats
	map<string, Stats> stats = 5;

	map<string, FailedTasks> failed_tasks = 6;
}

message ScheduleRequest {
	string fn_name = 1;
}

message ScheduleResponse {
	optional string leader_redirect = 1;
	optional string address = 2;
}

message UnRegisterRequest {
	string address = 1;
}

message UnRegisterResponse {
	optional string leader_redirect = 1;
}

message RaftStepRequest {
	oneof req_type {
		string proposal = 1;
		string msg = 2;
	}
}

message RaftStepResponse {
}

service GlobalSchedulerService {
	rpc Register(RegisterRequest) returns (RegisterResponse);
	rpc HeartBeat(HeartBeatRequest) returns (HeartBeatResponse);
	rpc Schedule(ScheduleRequest) returns (ScheduleResponse);
	rpc UnRegister(UnRegisterRequest) returns (UnRegisterResponse);
	rpc RaftStep(RaftStepRequest) returns (RaftStepResponse);
}
